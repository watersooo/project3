pipeline {
    agent any

    environment {
        ARGOCD_AUTH_TOKEN = credentials('ARGOCD_AUTH_TOKEN')  // Argo CD 인증 토큰
        DOCKER_REGISTRY_CREDENTIALS = credentials('docker-registry-credentials') // Docker 레지스트리 자격증명
        DOCKER_IMAGE = 'your-docker-image-name'  // 사용할 Docker 이미지 이름
        DOCKER_REGISTRY = 'your-docker-registry-url'  // Docker 레지스트리 URL (예: DockerHub, ECR)
    }

    stages {
        stage('Checkout') {
            steps {
                // Git에서 소스 체크아웃
                git branch: 'main', url: 'https://github.com/your-repo-url.git'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Docker 이미지 빌드
                    docker.build("${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${BUILD_NUMBER}")
                }
            }
        }

        stage('Push Docker Image to Registry') {
            steps {
                script {
                    // Docker 이미지 레지스트리에 푸시
                    docker.withRegistry("https://${DOCKER_REGISTRY}", 'docker-registry-credentials') {
                        docker.image("${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${BUILD_NUMBER}").push()
                    }
                }
            }
        }

        stage('Push to Git') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'github-credentials', usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {
                    sh '''
                        git config user.name "jenkins"
                        git config user.email "jenkins@example.com"
                        git add .
                        git commit -m "Jenkins build #${BUILD_NUMBER}"
                        git push https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/<YOUR_REPO>.git HEAD:<YOUR_BRANCH>
                    '''
                }
            }
        }

        stage('Deploy to Argo CD') {
            steps {
                echo 'Deploying to Argo CD...'
                // Argo CD 로그인 및 동기화
                sh 'argocd login <ARGOCD_SERVER> --username admin --password <PASSWORD> --insecure'
                sh 'argocd app sync <APP_NAME> --auth-token $ARGOCD_AUTH_TOKEN'
            }
        }
    }

    post {
        success {
            echo 'Build and Deployment successful!'
        }
        failure {
            echo 'Build or Deployment failed!'
        }
    }
}
